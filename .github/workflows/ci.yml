name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: tournament_db
        ports:
          - 5432:5432

    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v3

      - name: 📥 Installer Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: 🐳 Lancer les services avec Docker Compose
        run: |
          cd docker
          docker compose up -d database
          sleep 5

      - name: 🔄 Vérifier la connexion à PostgreSQL
        run: |
          until docker exec $(docker ps -qf "name=database") pg_isready -U user -d tournament_db; do
            echo "⏳ Waiting for PostgreSQL..."
            sleep 2
          done

      - name: 🚀 Démarrer le backend
        run: docker compose up --build -d backend

      - name: 📜 Synchroniser Prisma avec la base
        run: docker exec $(docker ps -qf "name=backend") npx prisma db push

      - name: ✅ Exécuter les tests backend
        run: docker exec $(docker ps -qf "name=backend") npm run test

      - name: 🛑 Arrêter les containers après tests
        run: docker compose down

  build-and-push:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: 🔄 Checkout du code
        uses: actions/checkout@v3

      - name: 🔑 Se connecter à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🏗️ Build des images Docker
        run: |
          docker build -t my-backend ./backend
          docker tag my-backend mydockerhubusername/my-backend:latest

      - name: 📤 Pousser les images sur Docker Hub
        run: |
          docker push mydockerhubusername/my-backend:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: 🚀 Déployer sur le serveur
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull mydockerhubusername/my-backend:latest
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend -p 5000:5000 mydockerhubusername/my-backend:latest
